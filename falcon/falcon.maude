--- Specification of FALCON
--- Author: Víctor García Valero <vicgarval@upv.es>

--- Module specifying basic datatypes and the operations
fmod DATA-TYPES is
     --- Supersort of all data
     sort Data .

    --- Definitions of types of data
     sort Polynomial .

     --- Pair
    sort Pair .

    --- A Pair can be seen as a Polynomial divided in two parts
    subsort Pair < Polynomial .

    op [_,_] : Data Data -> Pair [ctor] .

    vars D1 D2 : Data .

    --- First element of Pair
    op first : Pair -> Data .
    eq first([D1,D2]) = D1 .
    --- Second element of Pair
    op second : Pair -> Data .
    eq second([D1,D2]) = D2 .
endfm

--- Module to specify all the hash functions used during the protocol
fmod PROTOCOL-HASH-OPERATIONS is
    protecting DATA-TYPES .

endfm

--- Module to represent the operations and data handled during KEYGEN step
fmod PROTOCOL-KEYGEN is
    protecting DATA-TYPES .

endfm

--- Module to represent the operations and data handled during ENC
fmod PROTOCOL-ENC is
    protecting DATA-TYPES .

endfm

--- Module to represent the operations and data handled during DEC
fmod PROTOCOL-DEC is
    protecting DATA-TYPES .

endfm

--- Module to set the foundations of our symbolic model
fmod MODEL-CONFIGURATION is
    protecting DATA-TYPES .

    --- SORTS---------------------------------
    sorts Identifier Content Principal Principals . 
    sorts MsgState Msg Msgs .
    subsort Msg < Msgs .
    subsort Principal < Principals .

    sorts Key Keys .
    subsort Key < Keys .

    --- We distinguish between public and secret keys, both being keys in the end
    sorts PKey SKey .

    ---We define keys as a type of content
    subsorts Polynomial < PKey SKey < Key < Content .

    --- We also declare that a pair is content
    subsort Pair < Content .

    --- Sort for the State of our system
    sort GlobalState .

    --- OPERATORS----------------------------
    --- Empty group of keys
    op emptyK : -> Keys .
    --- Group of keys
    op _;_ : Keys Keys -> Keys [assoc comm id: emptyK] .

    var K : Key .
    vars KS1 KS2 : Keys .

    --- Operation to check the precence of a key in a participant
    op _in_ : Key Keys -> Bool .
    eq K in (KS1 ; K ; KS2) = true .
    eq K in (KS1) = false [owise] .

    --- Operator to represent the relation of a public key and a principal
    op publicKey : Identifier Key -> PKey .

    --- Operator to represent the relation of a secret key and a principal
    op secretKey : Identifier Key -> SKey .

    --- Operator to represent the shared key with a participant
    op sharedKey : Identifier Key -> SKey [format (g! o)] .

    --- Posible states for a message delivering PK
    ops sentPK receivedPK : -> MsgState .
    --- Posible states for a message delivering C
    ops sentC receivedC : -> MsgState .

    --- Empty content
    op emptyC : -> Content .
    --- Group of contents
    op __ : Content Content -> Content [assoc comm id: emptyC] .

    vars C CONT1 CONT2 : Content .

    --- Operation to check the contents of a participant
    op _in_ : Content Content -> Bool .
    eq C in (CONT1 C CONT2) = true .
    eq C in (CONT1) = false [owise] .

    --- Structure of a message
    --- Sender, Receiver, State, Content
    op msg{(_,_)[_]_} : Identifier Identifier MsgState Content -> Msg .

    --- Group of messsages
    op emptyM : -> Msgs .
    op __ : Msgs Msgs -> Msgs [assoc id: emptyM format (d nt d)] .

    var M : Msg .
    vars MS1 MS2 : Msgs .
    
    --- Operation to check the network
    op _in_ : Msg Msgs -> Bool .

    eq M in (MS1 M MS2) = true .
    eq M in (MS1) = false [owise] .

    --- Defintion of our three main participants followiing the literature
    ops Alice Eve Bob : ->  Identifier [ctor] .

    --- Definition of the default participant
    op none : -> Identifier [ctor] .

    --- Operator to assign a Ciphered text to a participant
    op cI : Identifier Pair -> Content .

    --- Operator to mark the current participant to whom the key exchange is happening
    op peer : Identifier -> Content .

    --- Definition of the components of a Principal
    --- (idenifier [keys] content)
    op _[_]_ : Identifier Keys Content -> Principal [ctor] .

    --- Group of principals
    op __ : Principal Principal -> Principals [assoc comm format (d n d)] .

    --- Global state composed by Samples, Principals and a Network with messages
    op {_}<_>net(_) : Content Principals Msgs -> GlobalState [ctor format (n d d n n n d d d d)] .
endfm

--- KEM behaviour
mod PROTOCOL is
    --- IMPORTS -------------------------------
    protecting DATA-TYPES .
    protecting PROTOCOL-HASH-OPERATIONS .
    protecting PROTOCOL-KEYGEN .
    protecting PROTOCOL-ENC .
    protecting PROTOCOL-DEC .
    protecting MODEL-CONFIGURATION .

    --- Samples ------------------------------------------------

    --- Initial states------------------------------------------

    --- RULES --------------------------------------------------
    
    --- Honest participant behaviour----------------------------

    --- Intruder behaviour--------------------------------------
    
endm