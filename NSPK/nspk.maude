--- Specification example of NSPK in Maude
--- Author: Víctor García Valero <vicgarval@upv.es>

mod NSPK is
   sort Key .
   sorts PubKey SecKey .

   subsort PubKey < Key .
   subsort SecKey < Key .

   sort Identifier .
   ops A B E : -> Identifier [ctor] .

   sort Content .
   sort Nonce .
   subsort Identifier < Content .
   subsort Key < Content .
   subsort Nonce < Content .

   op empty : -> Content [ctor] .
   op _,_ : Content Content -> Content [assoc comm id: empty].

   vars C CS : Content .

   op _in_ : Content Content -> Bool .
   eq C in (C,CS) = true .
   eq C in CS = false [owise] .

   ---Definition of nonces for Alice and Bob
   ops Na Nb : -> Nonce [ctor] .

   ---Definition of public keys for Alice, Bob and Server
   ops Kpa Kpb Kpe : -> PubKey [ctor] .
   ---Definition of secret keys for Alice, Bob and Server
   ops Ksa Ksb Kse : -> SecKey [ctor] .

   --- Operators to relate a public key with a participant's identifier
   op pk : Identifier PubKey -> PubKey .
   --- Operators to relate a secret key with a participant's identifier
   op sk : Identifier SecKey -> SecKey .

   --- Operation to represent encryption
   op {_}_ : Content PubKey -> Content .
   --- Operation to represent signature
   op {_}_ : Content SecKey -> Content .

   sorts Participant Participants .
   subsort Participant < Participants .
   op p[_](_) : Identifier Content -> Participant [ctor] .
   op empty : -> Participant .
   op __ : Participant Participant -> Participants [assoc comm id: empty] . 

   sorts Message Messages .
   subsort Message < Messages .
   op msg(_->_,_) : Identifier Identifier Key -> Message [ctor] .
   op none : -> Messages [ctor] .
   op __ : Message Message -> Messages [id: none] .

   sort GlobalState .
   op _|_ : Participants Messages -> GlobalState .

   op init : -> GlobalState .
   eq init =   p[A](Na,pk(B,Kpb),pk(E,Kpe),pk(A,Kpa),sk(A,Ksa)) 
               p[B](Nb,pk(A,Kpa),pk(E,Kpe),pk(B,Kpb),sk(B,Ksb)) 
               p[E](pk(A,Kpa),pk(B,Kpb),pk(E,Kpe),sk(E,Kse)) | none .

   var PS : Participants .
   vars CSA CSB CSE : Content .
   vars PK PK' : PubKey .
   var SK : SecKey .
   var N : Nonce .
   vars I : Identifier .

   crl [1s] :  p[A](pk(I,PK),Na,CSA) p[I](CSB) PS | none 
               =>
               p[A](pk(I,PK),Na,CSA) p[I](CSB) PS | msg(A -> I, {Na,A}PK) 
               if not Na in CSB .

   rl [1r] :   p[B](sk(B,SK),pk(B,PK),CSB) PS | msg(I -> B, {N,I}PK)
               =>
               p[B](N,sk(B,SK),pk(B,PK),CSB) PS | none .

   crl [2s] :  p[B](Na,Nb,pk(A,PK),CSB) p[A](CSA) PS | none
               =>
               p[B](Na,Nb,CSB) p[A](CSA) PS | msg(B -> A, {Na,Nb}PK)
               if not Nb in CSA .

   rl [2r] :   p[A](sk(A,SK),pk(A,PK),N,CSA) PS | msg(B -> A, {N,C}PK)
               =>
               p[A](C,N,CSA) PS | none .
   
   rl [3s] :   p[A](Na,Nb,pk(B,PK),CSA) PS | none 
               =>
               p[A](Na,Nb) PS | msg(A -> B, {Nb}PK) .

   rl [3r] :   p[B](N,Na,pk(B,PK),sk(B,SK),CSB) PS | msg(A -> B, {N}PK) 
               =>
               p[B](N,Na) PS | none .

   rl [E1] :   p[E](pk(E,PK),pk(B,PK'),sk(E,SK),CSE) PS | msg(A -> E, {N,A}PK)
               =>
               p[E](N,pk(E,PK),pk(B,PK'),sk(E,SK),CSE) PS | msg(A -> B, {N,A}PK') .
   
   rl [E2] :   p[E](CSE) PS | msg(B -> A, C)
               =>
               p[E](CSE) PS | msg(E -> A, C) .

   rl [E3] :   p[A](pk(A,PK),sk(A,SK),N,CSA) PS | msg(E -> A, {N,C}PK)
               =>
               p[A](C,N,CSA) PS | none .

   rl [E4] :   p[A](Nb,pk(E,PK),CSA) PS | none
               =>
               p[A](CSA) PS | msg(A -> E, {Nb}PK).

   rl [E5] :   p[E](pk(E,PK),pk(B,PK'),sk(E,SK),CSE) PS | msg(A -> E, {N}PK)
               =>
               p[E](N,CSE) PS | msg(A -> B, {N}PK') .
endm

--- Agreement search
search init =>* p[A](Na,Nb) p[B](Na,Nb) PS | M:Messages .
--- MITM search
search init =>* p[E](Na,Nb,CSE) PS | M:Messages .