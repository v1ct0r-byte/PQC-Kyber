--- Specification of CRYSTALS-KYBER till step 3

--- Module specifying basic datatypes and its operations used in KYBER
fmod DATA-TYPES is
    protecting INT .
    --- Here we are subsuming all sizes of vectors (and abstract that all vectors are column vectors)
    --- We also define type for matrices and polynomials
    sorts Vector Matrix .

    --- We specify that a vector is a matrix of one row or one column
    subsort Vector < Matrix .

    --- Concatenation of vectors result in a new vector
    op _||_ : Vector Vector -> Vector .

    --- Operator for the sum of vectors
    op _v+_ : Vector Vector -> Vector .

    --- Operator for the substraction of vectors
    op _v-_ : Vector Vector -> Vector .

    --- Operator multiplication of a vector and a vector
    op _v*_ : Vector Vector -> Vector .

    vars M1 M2 M3 : Matrix .
    --- Operator multiplication of a matrix and a vector
    op _m*_ : Matrix Vector -> Vector .

    vars V1 V2 V3 : Vector .

    --- Pair
    sort Pair .
    op _,_ : Vector Vector -> Pair .
    --- First element of Pair
    op first : Pair -> Vector .
    eq first((V1,V2)) = V1 .
    --- Second element of Pair
    op second : Pair -> Vector .
    eq second((V1,V2)) = V2 .

    --- Constant and values necessary on modules for operations

    --- du and dv are integer parameters of CPAPKE in ENC and DEC
    ops du dv : -> NzNat .

    --- Rho and Sigma
    ops Rho Sig : -> Vector .

    --- Constant values to represent s and e
    ops s e : -> Vector .

    --- Message randomply generated by a principal
    op m : -> Vector .

    --- Constant to represent the chosen coins
    ops r r' : -> Vector .

    --- Operation to represent the traspose of a given matrix or vector
    op tpM : Matrix -> Matrix .
    op tpV : Vector -> Vector .
endfm

--- Module to specify all the hash functions that are used in the steps of KYBER KEM
fmod KYBER-HASH-OPERATIONS is
    protecting DATA-TYPES .

    --- H recieves a random vector and returns a hash of it (which is also a vector)
    op H : Vector -> Vector .
    eq H(m) = m .

    --- Sample values taken from the set of byte-arrays of length 32
    op d : -> Vector .

    --- G recieves a random number (vector) from the polynomial ring R and returns a pair of vectors
    op G : Vector -> Pair .
    eq G(d) = (Rho,Sig) .
    --- eq G(m||H(PK)) = (key1',r) .

    ops key1 key2 : -> Vector .

    --- Key Derivation Function receives a value and a hash value and derivates a key
    op KDF : Vector Vector -> Vector .
    --- eq KDF() = key1 .
endfm

--- Module to specifiy basic operations on data
fmod ENCRYPTION is
    protecting DATA-TYPES .

    --- Operators to compress and decompress
    ops Compress Decompress : Vector NzNat -> Vector .

    --- Definition of Decompress
    --- eq Decompress() = m' .
    --- eq Decompress(decode(ciphertext),du) =  u .
    --- eq Decompress(decode(c v+ du m* k *n/8), dv) = v .

    --- Property of interest
    --- x' == Decompress(Compress(x,d),d)
endfm

--- Module to represent the operations and data handled during KEYGEN
fmod KYBER-CPAPKE-KEYGEN is
    protecting DATA-TYPES .

    --- Public Square matrix A
    op A : -> Matrix .

    --- Operator to generate a matrix from the FIRST vector given by G(d)
    op generateA : Vector -> Matrix .
    eq generateA(Rho) = A .

    --- Operators to sample vectors s and e from the SECOND vector given by G(d)
    ops sampleS sampleE : Vector -> Vector .
    eq sampleS(Sig) = s .
    eq sampleE(Sig) = e .
endfm

--- Module to represent the operations and data handled during ENC
fmod KYBER-CPAPKE-ENC is
    protecting DATA-TYPES .
    protecting ENCRYPTION .

    op sampleR' : Vector -> Vector . 
    eq sampleR'(r) = r' .

    ops e1 e2 : -> Vector .

    --- Operators to sample vectors s and e from the SECOND vector given by G(d)
    ops sampleE1 sampleE2 : Vector -> Vector .
    eq sampleE1(r) = e1 .
    eq sampleE2(r) = e2 .
endfm

--- Module to represent the operations and data handled during DEC
--- Its main purpouse is to demonstrate that the computed key is
--- the one that originated c in Bob side using PK
fmod KYBER-CPAPKE-DEC is
    protecting DATA-TYPES .

    var CHIPHERTEXT : Vector .
endfm

--- CRYSTALS-KYBER
mod KYBERV2 is
    --- IMPORTS-------------------------------
    protecting KYBER-HASH-OPERATIONS .
    protecting ENCRYPTION .
    protecting KYBER-CPAPKE-KEYGEN .
    protecting KYBER-CPAPKE-ENC .

    --- SORTS---------------------------------
    
    sorts Identifier Principal Content Principals .
    sorts MsgState Msg Msgs .
    subsort Msg < Msgs . 
    subsort Principal < Principals .

    sorts Key Keys .
    subsort Key < Keys .

    ---We define keys as a type of content
    subsorts Vector < Key < Content .

    --- We also declare that a pair is content
    subsort Pair < Content .

    sort GlobalState .
    
    --- OPERATORS----------------------------
    --- Empty group of keys
    op emptyK : -> Keys .
    --- Group of keys
    op _|_ : Keys Keys -> Keys [assoc id: emptyK comm] .

    --- Posible states for a message
    ops sent received consumed intercepted : -> MsgState .

    --- Empty content
    op emptyC : -> Content .
    --- Group of contents
    op __ : Content Content -> Content [assoc id: emptyC comm] .

    --- Structure of a message
    --- Sender, Receiver, State, Content
    op msg{(_,_)[_]_} : Identifier Identifier MsgState Content -> Msg .
    op emptyM : -> Msgs .
    op __ : Msgs Msgs -> Msgs [id: emptyM assoc] .

    ops Alice Eve Bob : ->  Identifier .
    --- Definition of the components of a Principal
    --- (idenifier that can be Alice, Bob or Eve [keys received or generated] content that the principal stores)
    op _[_]_ : Identifier Keys Content -> Principal .

    --- Group of principals
    op __ : Principal Principal -> Principals [assoc comm] .

    --- Global state composed by Principals and a network with messages
    op <_>net(_) : Principals Msgs -> GlobalState .
    op True : -> GlobalState .

    --- RULES-------------------------------------------------------------------------------------------------------------
    
    vars P1 P2 : Principal .
    var PS : Principals .
    var MSGS : Msgs . 
    op k : -> Key .
    vars PK SK : Key .
    var U V : Vector .
    var KS1 KS2 : Keys .
    vars C1 C2 : Vector .
    var C : Pair .
    var CONT1 CONT2 : Content .

    crl [KeyGen] : < (Alice[emptyK]emptyC) PS >net(emptyM) => < (Alice[PK | SK]emptyC) PS >net(emptyM)
        if SK := sampleS(second(G(d))) /\ 
        PK := ((generateA(first(G(d))) m* SK) v+ sampleE(second(G(d)))) .

    crl [SendPK] : < (Alice[PK | KS1]CONT1) PS >net(emptyM) => < (Alice[PK | KS1]CONT1) PS >net(msg{(Alice,Bob)[sent]PK})
        if SK := sampleS(second(G(d))) /\ 
        PK := ((generateA(first(G(d))) m* SK) v+ sampleE(second(G(d)))) .

    crl [RecievePK] : < (Bob[KS1]CONT1) PS >net(MSGS msg{(Alice,Bob)[sent]PK}) => < (Bob[PK | KS1]CONT1) PS >net(MSGS msg{(Alice,Bob)[received]PK})
        if SK := sampleS(second(G(d))) /\ 
        PK := ((generateA(first(G(d))) m* SK) v+ sampleE(second(G(d)))) .
    
    crl [Enc] : < (Bob[PK | KS1]CONT1) PS >net(MSGS msg{(Alice,Bob)[received]PK}) => < (Bob[k | PK | KS1]C CONT1) PS >net(MSGS msg{(Alice,Bob)[consumed]PK})
        if SK := sampleS(second(G(d))) /\ 
        PK := ((generateA(first(G(d))) m* SK) v+ sampleE(second(G(d)))) /\
        U := ((tpM(generateA(first(G(d)))) m* sampleR'(r)) v+ sampleE1(r)) /\
        V := (((tpV(PK) v* sampleR'(r)) v+ sampleE2(r)) v+ Decompress(H(m),1)) /\
        C1 := Compress(U,du) /\
        C2 := Compress(V,dv) /\
        C := (C1,C2) .

    crl [SendCiph] : < (Bob[KS1]C CONT1) PS >net(MSGS msg{(Alice,Bob)[consumed]PK}) => < (Bob[KS1]C CONT1) PS >net(MSGS msg{(Alice,Bob)[consumed]PK} msg{(Bob,Alice)[sent](C)})
        if SK := sampleS(second(G(d))) /\ 
        PK := ((generateA(first(G(d))) m* SK) v+ sampleE(second(G(d)))) /\
        U := ((tpM(generateA(first(G(d)))) m* sampleR'(r)) v+ sampleE1(r)) /\
        V := (((tpV(PK) v* sampleR'(r)) v+ sampleE2(r)) v+ Decompress(H(m),1)) /\
        C1 := Compress(U,du) /\
        C2 := Compress(V,dv) /\
        C := (C1,C2) .

    crl [RecieveCiph] : < (Alice[KS1]CONT1) PS >net(MSGS msg{(Bob,Alice)[sent](C)}) => < (Alice[KS1]CONT1 (C)) PS >net(MSGS msg{(Bob,Alice)[received](C)})
        if SK := sampleS(second(G(d))) /\ 
        PK := ((generateA(first(G(d))) m* SK) v+ sampleE(second(G(d)))) /\
        U := ((tpM(generateA(first(G(d)))) m* sampleR'(r)) v+ sampleE1(r)) /\
        V := (((tpV(PK) v* sampleR'(r)) v+ sampleE2(r)) v+ Decompress(H(m),1)) /\
        C1 := Compress(U,du) /\
        C2 := Compress(V,dv) /\
        C := (C1,C2) .

    crl [Dec] : < (Alice[SK | KS1]C CONT1) PS >net(MSGS msg{(Bob,Alice)[received](C)}) => < (Alice[SK | k | KS1](C CONT1)) PS >net(MSGS msg{(Bob,Alice)[consumed](C)})
        if SK := sampleS(second(G(d))) /\ 
        PK := ((generateA(first(G(d))) m* SK) v+ sampleE(second(G(d)))) /\
        U := ((tpM(generateA(first(G(d)))) m* sampleR'(r)) v+ sampleE1(r)) /\
        V := (((tpV(PK) v* sampleR'(r)) v+ sampleE2(r)) v+ Decompress(H(m),1)) /\
        C1 := Compress(U,du) /\
        C2 := Compress(V,dv) /\
        C := (C1,C2) .

    rl [Comp] : < (Alice[k | KS1]CONT1) (Bob[k | KS2]CONT2) PS >net(MSGS) => True .

    --- Initial state-------------------------------------------------------------------------------------------------------------
    
    op init : -> GlobalState .
    eq init = < (Alice[emptyK]emptyC) (Eve[emptyK]emptyC) (Bob[emptyK]emptyC) >net(emptyM) .
endm

search init =>* True .
rew init .