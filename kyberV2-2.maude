---Specification of CRYSTALS-KYBER till step 3

---Module specifying basic datatypes and its operations used in KYBER
fmod DATA-TYPES is
    protecting INT .
    ---Here we are subsuming all sizes of vectors (and abstract that all vectors are column vectors)
    ---We also define type for matrices and polynomials
    sorts Vector Matrix Polynomial .

    ---We consider vectors as representations of integers
    ---Â¿Should we consider integers as vectors of bytes?
    ---subsort Vector < Int .

    ---A Vector is a also a Matrix with one row or one column
    ---Only square matrices are considered
    ---And can also be seen as a representation of a Polynomial
    subsorts Polynomial < Vector < Matrix .

    ---Concatenation of vectors result in a new vector
    op _||_ : Vector Vector -> Vector .

    ---Operator for the sum of vectors
    op _v+_ : Vector Vector -> Vector .

    vars m1 m2 m3 : Matrix .
    ---Operator multiplication of a matrix and a vector
    op _m*_ : Matrix Vector -> Vector .

    vars v1 v2 v3 : Vector .

    ---Pair
    sort Pair .
    op _,_ : Vector Vector -> Pair .
    ---First element of Pair
    op first : Pair -> Vector .
    eq first((v1,v2)) = v1 .
    ---Second element of Pair
    op second : Pair -> Vector .
    eq second((v1,v2)) = v2 .
endfm

---Module to represent the operations and data handled during KEYGEN
fmod KYBER-CPAPKE-KEYGEN is
    pr DATA-TYPES .

    ---Rho and Sigma
    ops Rho Sig : -> Vector .

    ---Sample values taken from the set of byte-arrays of length 32
    op d : -> Vector .

    ---HASH FUNCTIONS----------------------------------------------------------------
    ---G recieves a random number (vector) from the polynomial ring R and returns a pair of vectors
    op G : Vector -> Pair .
    eq G(d) = (Rho,Sig) .

    ---H recieves a random vector and returns a hash of it (which is also a vector)
    op H : Vector -> Vector .
    ----------------------------------------------------------------------------------

    op A : -> Matrix .
    ---Operator to generate a matrix from the FIRST vector given by G(d)
    op generateA : Vector -> Matrix .
    eq generateA(Rho) = A .

    ---Constant values to represent s and e
    ops s e : -> Vector .

    ---Operators to sample vectors s and e from the SECOND vector given by G(d)
    ops sampleS sampleE : Vector -> Vector .
    eq sampleS(Sig) = s .
    eq sampleE(Sig) = e .
endfm

---Module to represent the operations and data handled during ENC
fmod KYBER-CPAPKE-ENC is
    protecting DATA-TYPES .

    ---du and dv are integer parameters of CPAPKE
    ops du dv : -> NzNat .

    ops u v : -> Vector .

    ---Cu and CV are the compressed vectors u and v
    ops CU CV : -> Vector . 

    op compress : Vector NzNat -> Vector .
    eq compress(u,du) = CU .
    eq compress(v,dv) = CV .
endfm

---CRYSTALS-KYBER
mod KYBERV2 is
    ---IMPORTS-------------------------------
    pr KYBER-CPAPKE-KEYGEN .
    pr KYBER-CPAPKE-ENC .

    ---SORTS---------------------------------
    
    sorts Identifier Principal Content Principals .
    sorts MsgState Msg Msgs .
    subsort Msg < Msgs . 
    subsort Principal < Principals .

    sorts Key Keys .
    subsort Key < Keys .

    ***We define keys as a type of content
    subsorts Vector < Key < Content .
    
    sort Ciphertext .
    subsort Ciphertext < Vector < Content .

    sort GlobalState .
    
    ---OPERATORS----------------------------
    ---Empty group of keys
    op emptyK : -> Keys .
    ---Group of keys
    op _|_ : Keys Keys -> Keys [assoc id: emptyK comm] .

    ---Posible states for a message
    ops sent received consumed intercepted : -> MsgState .

    ---Empty content
    op emptyC : -> Content .
    ---Group of contents
    op __ : Content Content -> Content [assoc id: emptyC comm] .

    ---Structure of a message
    ---Sender, Receiver, State, Content
    op msg{(_,_)[_]_} : Identifier Identifier MsgState Content -> Msg .
    op emptyM : -> Msgs .
    op __ : Msgs Msgs -> Msgs [id: emptyM assoc] .

    ops Alice Eve Bob : ->  Identifier .
    ---Definition of the components of a Principal
    ---(idenifier that can be Alice, Bob or Eve [keys received or generated] content that the principal stores)
    op _[_]_ : Identifier Keys Content -> Principal .

    ---Group of principals
    op __ : Principal Principal -> Principals [assoc comm] .

    ---Global state composed by Principals and a network with messages
    op <_>net(_) : Principals Msgs -> GlobalState .
    op True : -> GlobalState .

    ---RULES-------------------------------------------------------------------------------------------------------------
    
    vars P1 P2 : Principal .
    var PS : Principals .
    var MSGS : Msgs .
    ---ops pk sk k : -> Key .
    op k : -> Key .
    vars pk sk : Key .
    var ks : Keys .
    var Ciph : Vector .
    var Cont Cont2 : Content .

    crl [KeyGen] : < (Alice[emptyK]emptyC) PS >net(emptyM) => < (Alice[pk | sk]emptyC) PS >net(emptyM)
        if pk := ((generateA(first(G(d))) m* sampleS(second(G(d)))) v+ sampleE(second(G(d)))) /\ 
        sk := sampleS(second(G(d))) .

    crl [SendPK] : < (Alice[pk | ks]Cont) PS >net(emptyM) => < (Alice[pk | ks]Cont) PS >net(msg{(Alice,Bob)[sent]pk})
        if pk := ((generateA(first(G(d))) m* sampleS(second(G(d)))) v+ sampleE(second(G(d)))) /\ 
        sk := sampleS(second(G(d))) .

    crl [RecievePK] : < (Bob[ks]Cont) PS >net(MSGS msg{(Alice,Bob)[sent]pk}) => < (Bob[pk | ks]Cont) PS >net(MSGS msg{(Alice,Bob)[received]pk})
        if pk := ((generateA(first(G(d))) m* sampleS(second(G(d)))) v+ sampleE(second(G(d)))) /\ 
        sk := sampleS(second(G(d))) .
    
    crl [Enc] : < (Bob[pk | ks]Cont) PS >net(MSGS msg{(Alice,Bob)[received]pk}) => < (Bob[k | pk | ks]Ciph Cont) PS >net(MSGS msg{(Alice,Bob)[consumed]pk})
        if pk := ((generateA(first(G(d))) m* sampleS(second(G(d)))) v+ sampleE(second(G(d)))) /\ 
        sk := sampleS(second(G(d))) /\
        Ciph := compress(u,du) || compress(v,dv) .

    crl [SendCiph] : < (Bob[ks]Ciph Cont) PS >net(MSGS msg{(Alice,Bob)[consumed]pk}) => < (Bob[ks]Ciph Cont) PS >net(MSGS msg{(Alice,Bob)[consumed]pk} msg{(Bob,Alice)[sent](Ciph)})
        if pk := ((generateA(first(G(d))) m* sampleS(second(G(d)))) v+ sampleE(second(G(d)))) /\ 
        sk := sampleS(second(G(d))) /\
        Ciph := compress(u,du) || compress(v,dv) .

    crl [RecieveCiph] : < (Alice[ks]Cont) PS >net(MSGS msg{(Bob,Alice)[sent](Ciph)}) => < (Alice[ks]Cont (Ciph)) PS >net(MSGS msg{(Bob,Alice)[received](Ciph)})
        if pk := ((generateA(first(G(d))) m* sampleS(second(G(d)))) v+ sampleE(second(G(d)))) /\ 
        sk := sampleS(second(G(d))) /\
        Ciph := compress(u,du) || compress(v,dv) .

    crl [Dec] : < (Alice[sk | ks](Ciph Cont)) PS >net(MSGS msg{(Bob,Alice)[received](Ciph)}) => < (Alice[sk | k | ks](Ciph Cont)) PS >net(MSGS msg{(Bob,Alice)[consumed](Ciph)})
        if pk := ((generateA(first(G(d))) m* sampleS(second(G(d)))) v+ sampleE(second(G(d)))) /\ 
        sk := sampleS(second(G(d))) /\
        Ciph := compress(u,du) || compress(v,dv) .

    crl [Comp] : < (Alice[k | ks]Cont) (Bob[k | ks]Cont2) P1 >net(MSGS) => True
        if pk := ((generateA(first(G(d))) m* sampleS(second(G(d)))) v+ sampleE(second(G(d)))) /\ 
        sk := sampleS(second(G(d))) /\
        Ciph := compress(u,du) || compress(v,dv) .

    ---Initial state-------------------------------------------------------------------------------------------------------------
    
    op init : -> GlobalState .
    eq init = < (Alice[emptyK]emptyC) (Eve[emptyK]emptyC) (Bob[emptyK]emptyC) >net(emptyM) .
endm

---search in KYBERV2: init =>* True .