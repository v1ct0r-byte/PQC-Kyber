*** Tempalte for the specification of protocols with post-quantum capabilities
*** Author: Víctor García Valero <vicgarval@upv.es>

*** Module specifying basic datatypes and the operations
fmod DATA-TYPES is
     
endfm

*** Module to specify all the hash functions used during the protocol
fmod PROTOCOL-HASH-OPERATIONS is
    protecting DATA-TYPES .

endfm

*** Module to represent the operations and data handled in KEYGEN
fmod PROTOCOL-KEYGEN is
    protecting DATA-TYPES .

endfm

*** Module to represent the operations and data handled in ENC/SIGNING
fmod PROTOCOL-ENC is
    protecting DATA-TYPES .

endfm

*** Module to represent the operations and data handled in DEC/VERIFY
fmod PROTOCOL-DEC is
    protecting DATA-TYPES .

endfm

fmod MODEL-CONFIGURATION-BASE is
    sorts Sample Key Attribute Content .
endfm

view Sample from TRIV to MODEL-CONFIGURATION-BASE is
    sort Elt to Sample .
endv

view Key from TRIV to MODEL-CONFIGURATION-BASE is
    sort Elt to Key .
endv

view Attribute from TRIV to MODEL-CONFIGURATION-BASE is
    sort Elt to Attribute .
endv

view Content from TRIV to MODEL-CONFIGURATION-BASE is
    sort Elt to Content .
endv

*** Module to set the foundations of our symbolic model
fmod MODEL-CONFIGURATION is
    protecting DATA-TYPES .
    including MODEL-CONFIGURATION-BASE .
    protecting SET{Sample} * (op empty to emptyS) .
    protecting SET{Key} * (op empty to emptyK) .
    protecting SET{Attribute} * (op empty to emptyA) .
    protecting SET{Content} * (op empty to emptyC) .

    ***
    *** SORTS
    ***

    *** This subsort relation only changes the pregularity tuple.
    subsort Set{Content} < Sample .

    sorts Identifier Principal Principals .
    subsort Principal < Principals .
    sorts MsgState Msg Msgs .
    subsort Msg < Msgs .

    sort SamplePool .
    subsort Set{Sample} < SamplePool .

    op _,_ : SamplePool SamplePool -> SamplePool [ditto] .

    *** We distinguish between public and secret keys
    sorts PKey SKey .

    *** We define Public and Secret keys to be Keys 
    subsorts PKey SKey < Key .

    *** Define polynomials as samples
    subsort Polynomial < Sample .

    *** Define Strings as samples
    subsort StringMSG < Sample .

    *** Sort for the State of our system
    sort GlobalState .
    
    ***
    *** OPERATORS
    ***

    *** Operator to represent the relation of a public key and a principal
    op publicKey : Identifier Polynomial -> PKey .

    *** Operator to represent the relation of a secret key and a principal
    op secretKey : Identifier Polynomial -> SKey .

    *** Operator to represent the shared key with a participant
    op sharedKey : Identifier Polynomial -> SKey [format (g! o)] .

    *** Posible states for a message delivering M
    ops sent received : -> MsgState .

    *** Structure of a message
    *** Sender, Receiver, State, Content
    op msg{(_,_)[_]_} : Identifier Identifier MsgState Content -> Msg .

    subsort Polynomial < Content .
    subsort StringMSG < Content .

    *** Group of messsages
    op emptyM : -> Msgs .
    op __ : Msgs Msgs -> Msgs [assoc id: emptyM format (d nt d)] .

    var M : Msg .
    vars MS1 MS2 : Msgs .
    
    *** Operation to check the network
    op _in_ : Msg Msgs -> Bool .

    eq M in (MS1 M MS2) = true .
    eq M in (MS1) = false [owise] .

    *** Definition of the default participant
    op none : -> Identifier [ctor] .
    *** Defintion of our three main participants following the literature
    ops Alice Eve Bob : ->  Identifier [ctor] .

    *** Operator to assign a Ciphered text to a participant
    op cI : Identifier Pair -> Attribute .

    *** Operator to mark the current participant to whom the key exchange is happening
    op peer : Identifier -> Attribute .

    *** Definition of the components of a Principal
    *** (idenifier [keys] content)
    op _[_]_ : Identifier Set{Key} Set{Attribute} -> Principal [ctor] .

    *** Group of principals
    op __ : Principals Principals -> Principals [assoc comm format (d n d)] .

    *** Global state composed by Samples, Principals and a Network with messages
    op {_}<_>net(_) : SamplePool Principals Msgs -> GlobalState [ctor format (n d d n n n d d d d)] .
endfm

*** Protocol behaviour
mod PROTOCOL is
    ***
    *** IMPORTS
    ***
    
    protecting DATA-TYPES .
    protecting PROTOCOL-HASH-OPERATIONS .
    protecting PROTOCOL-KEYGEN .
    protecting PROTOCOL-ENC .
    protecting PROTOCOL-DEC .
    protecting MODEL-CONFIGURATION .

    ***
    *** INITIAL STATES
    ***

    ***
    *** RULES
    ***

    ***
    *** HONEST PARTICIPANT BEHAVIOUR
    ***

    ***
    *** INTRUDER BEHAVIOUR
    ***
endm